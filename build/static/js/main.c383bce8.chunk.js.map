{"version":3,"sources":["components/Cube.js","components/AudioAnalyser.js","components/AudioVisualiser.js","App.js","index.js"],"names":["PureComponent","AudioAnalyser","state","playing","onAudioFrame","_this","audioAnalyser","frequencyData","Uint8Array","frequencyBinCount","getByteFrequencyData","props","onFrequencyData","requestAnimationFrame","onAudioPlayerRef","audioPlayerRef","audioEl","crossOrigin","audioContext","AudioContext","audioSource","createMediaElementSource","createAnalyser","connect","destination","onUpdatePlaying","callback","isCurrentlyPlaying","shouldNowBePlaying","setState","apply","arguments","react_default","a","createElement","bundle_default","Object","assign","controls","this","ref","onAbort","onEnded","onPause","onPlay","AudioVisualiser","AudioAnalyser_AudioAnalyser","src","style","width","renderFrequencyData","toConsumableArray","DEFAULT_FILTER","api_key","frequencyZoomScalar","scaleLinear","domain","range","App","mp3","gifs","term","loadingMusic","loadingVideos","searchingGiphy","differenceIndex","componentDidMount","onSearchGiphy","onChangeSearch","_ref","target","value","debounce","filter","objectSpread","q","fetch","concat","qs","stringify","then","response","json","_ref2","data","onPreloadVideos","catch","Promise","all","map","gif","resolve","reject","image","window","Image","images","original","url","onload","onerror","freqs","length","averageAmplitude","reduce","memo","freq","amplitudeGif","scaleQuantize","console","log","Container","position","height","zIndex","objectFit","Navbar","bg","variant","expand","Brand","to","children","Toggle","Form","inline","InputGroup","className","Control","type","placeholder","onChange","Append","Text","Spinner","animation","size","AudioVisualiser_AudioVisualiser","textAlign","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.c383bce8.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport * as THREE from 'three'\n\nexport default class Scene extends PureComponent {\n\n  state = {}\n\n  componentDidMount = () => {\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    this.camera = new THREE.PerspectiveCamera(75, (width / height), 0.1, 1000)\n    this.camera.position.z = 4\n\n    this.geometry = new THREE.BoxGeometry(1, 1, 1)\n    this.material = new THREE.MeshBasicMaterial({ color: 'purple' })\n    this.cube = new THREE.Mesh(this.geometry, this.material)\n\n    this.scene = new THREE.Scene()\n    this.scene.add(this.cube)\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })\n    this.renderer.setSize(width, height)\n\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n  }\n\n  componentWillUnmount = () => {\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate = () => {\n    this.cube.rotation.x += 0.01\n    this.cube.rotation.y += 0.01\n    this.cube.rotation.z += 0.01\n    this.camera.position.z = this.props.zoom\n\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  onRef = mount => this.mount = mount\n\n  render() {\n    const { ...otherProps } = this.props\n    return (<div { ...otherProps } ref={ this.onRef } />)\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ReactAudioPlayer from 'react-audio-player'\n\nexport default class AudioAnalyser extends PureComponent {\n\n  static propTypes = {\n    ...ReactAudioPlayer.propTypes,\n    onFrequencyData: PropTypes.func.isRequired\n  }\n\n  // Track our playing state\n  state = { playing: false }\n\n  // Analyse a single \"frame\" of audio\n  onAudioFrame = () => {\n    // Don't do anything if we're paused, or if we don't have an analyser\n    if (!this.state.playing || !this.audioAnalyser) return\n\n    // Create a new Uint8Array to inject the frequency data into\n    const frequencyData = new Uint8Array(this.audioAnalyser.frequencyBinCount)\n\n    // Inject the frequency data into the array\n    this.audioAnalyser.getByteFrequencyData(frequencyData)\n\n    // Invoke our `onFrequencyData` prop\n    this.props.onFrequencyData(frequencyData)\n\n    // On the next animation frame, repeat the process\n    requestAnimationFrame(this.onAudioFrame)\n  }\n\n  // Handle the audio player ref once it's rendered\n  onAudioPlayerRef = audioPlayerRef => {\n    if (!audioPlayerRef || !audioPlayerRef.audioEl) return\n\n    // Allow the audio element to read data from dubious sources\n    audioPlayerRef.audioEl.crossOrigin=\"anonymous\"\n\n    // Interface with the Web Audio API\n    const audioContext = new AudioContext()\n    const audioSource = audioContext.createMediaElementSource(audioPlayerRef.audioEl)\n    this.audioAnalyser = audioContext.createAnalyser()\n\n    // Connect our audio source to the analyser\n    audioSource.connect(this.audioAnalyser)\n\n    // And also to the audio destination\n    audioSource.connect(audioContext.destination)\n  }\n\n  // Create a simple interface for tracking play state\n  onUpdatePlaying = (playing, callback) => (...args) => {\n    // Figure out what the current/new play state is\n    const isCurrentlyPlaying = this.state.playing\n    const shouldNowBePlaying = playing\n\n    // Cache the new play state\n    this.setState({ playing })\n\n    // Start tracking the audio frequencies if we started playing\n    if (!isCurrentlyPlaying && shouldNowBePlaying) {\n      this.onAudioFrame()\n    }\n\n    // Invoke the callback with whatever args we were passed\n    if (typeof callback === 'function') {\n      return callback(...args)\n    }\n  }\n\n  render() {\n    return (\n      <ReactAudioPlayer controls\n        { ...this.props }\n        ref={ this.onAudioPlayerRef }\n        onAbort={ this.onUpdatePlaying(false, this.props.onAbort) }\n        onEnded={ this.onUpdatePlaying(false, this.props.onEnded) }\n        onPause={ this.onUpdatePlaying(false, this.props.onPause) }\n        onPlay={ this.onUpdatePlaying(true, this.props.onPlay) }\n      />\n    )\n  }\n\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nimport AudioAnalyser from './AudioAnalyser'\n\nexport default class AudioVisualiser extends PureComponent {\n\n  static propTypes = {\n    renderFrequencyData: PropTypes.func.isRequired\n  }\n\n  state = { frequencyData: [] }\n\n  onFrequencyData = frequencyData => this.setState({ frequencyData })\n\n  render() {\n    return (\n      <div>\n        <AudioAnalyser src={ this.props.src }\n          onFrequencyData={ this.onFrequencyData }\n          style={ { width: '100%' } }\n        />\n        { this.props.renderFrequencyData([ ...this.state.frequencyData ]) }\n      </div>\n    )\n  }\n\n}\n","import qs from 'qs'\nimport fetch from 'isomorphic-fetch'\nimport debounce from 'lodash/debounce'\n\nimport { scaleLinear, scaleQuantize } from 'd3-scale'\n\nimport React, { PureComponent } from 'react'\n\nimport {\n  Form,\n  Image,\n  Navbar,\n  Spinner,\n  Container,\n  InputGroup\n} from 'react-bootstrap'\n\nimport Cube from './components/Cube'\nimport AudioVisualiser from './components/AudioVisualiser'\n\nimport './App.css'\n\nconst DEFAULT_FILTER = {\n  api_key: 'jjIUQzslADPjJkPXJdmHrkqvGER7KVwV'\n}\n\nconst frequencyZoomScalar = scaleLinear()\n  .domain([ 0, 255 ])\n  .range([ 5, -2 ])\n\nexport default class App extends PureComponent {\n\n  state = {\n    mp3: 'https://cf-media.sndcdn.com/nPYUVOW2Guoe?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiKjovL2NmLW1lZGlhLnNuZGNkbi5jb20vblBZVVZPVzJHdW9lIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNTU2NTg5Nzc5fX19XX0_&Signature=gWq7ZKOur0JOsiK1iVS~RtNTDOLuV1lWnC1kp8G4mfSiVBMH0RZvVdOexu0WqfQ15nZcTI2xRTgYz50cRts3BW-Dtzvgk3LAIT1QIorFMRDMegAkfvKQfImPJiA5~Am~yIZgeXcsBtNstersRWAdj3-9Y01lCV7Z~ul50OxzlRoOrmmAK9MuImHe-jXVNCbUKKOK8OfsgZHAXHJStREC~TjAYGD-wPY5kFX9DCbATP-gsjcPUdLhKp8sM4qVkdTpY51ANGdAYz9V5aBOmaccS9v6sKvXE5RbEMRyL~L2sAY0~fDBXOTrmJC~q6B0T6OSmwaDP70QYktUY-zszK~YbQ__&Key-Pair-Id=APKAJAGZ7VMH2PFPW6UQ',\n    gifs: [],\n    term: 'acid',\n    loadingMusic: false,\n    loadingVideos: false,\n    searchingGiphy: false,\n    differenceIndex: []\n  }\n\n  componentDidMount = () => {\n    this.onSearchGiphy()\n  }\n\n  onChangeSearch = ({ target }) => {\n    this.setState({ term: target.value }, this.onSearchGiphy)\n  }\n\n  onSearchGiphy = debounce(() => {\n    this.setState({ searchingGiphy: true })\n    const filter = { q: this.state.term, ...DEFAULT_FILTER }\n    return fetch(`https://api.giphy.com/v1/gifs/search?${qs.stringify(filter)}`)\n      .then(response => response.json())\n      .then(({ data }) => this.setState({ gifs: data, searchingGiphy: false }, this.onPreloadVideos))\n      .catch(() => this.setState({ searchingGiphy: false }))\n  }, 1000)\n\n  onPreloadVideos = () => {\n    this.setState({ loadingVideos: true })\n    return Promise.all(this.state.gifs.map(gif => {\n      return new Promise((resolve, reject) => {\n        const image = new window.Image()\n        image.src = `${gif.images.original.url}`\n        image.onload = () => resolve()\n        image.onerror = () => reject()\n      })\n    })).then(() => this.setState({ loadingVideos: false }))\n    .catch(() => this.setState({ loadingVideos: false }))\n  }\n\n  renderFrequencyData = freqs => {\n    if (!this.state.gifs.length) return null\n    if (this.state.searchingGiphy) return null\n    if (this.state.loadingVideos) return null\n\n    const averageAmplitude = freqs.reduce(((memo, freq) => memo + freq), 0) / freqs.length\n    const amplitudeGif = scaleQuantize().domain([0,255]).range(this.state.gifs)(averageAmplitude)\n    console.log(amplitudeGif.images)\n\n    const zoom = frequencyZoomScalar(averageAmplitude)\n    return (\n      <Container style={ { position: 'relative' } }>\n        <img src={ `${amplitudeGif.images.original.url}` } style={ {\n          position: 'absolute',\n          width: '100%',\n          height: '60vh',\n          zIndex: -1,\n          objectFit: 'fill'\n        } } />\n      </Container>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\n          <Navbar.Brand to=\"/\" children=\"giphyviz\" />\n          <Navbar.Toggle />\n          <Form inline>\n            <InputGroup className=\"mb-3\">\n              <Form.Control type=\"text\"\n                value={ this.state.term }\n                placeholder=\"Search\"\n                onChange={ this.onChangeSearch }\n              />\n              { this.state.searchingGiphy ? (\n                <InputGroup.Append>\n                  <InputGroup.Text>\n                    <Spinner animation=\"border\" size=\"sm\" />\n                  </InputGroup.Text>\n                </InputGroup.Append>\n              ) : (\n                <InputGroup.Append>\n\n                </InputGroup.Append>\n              ) }\n            </InputGroup>\n          </Form>\n        </Navbar>\n\n        <AudioVisualiser src={ this.state.mp3 }\n          renderFrequencyData={ this.renderFrequencyData }\n        />\n\n        { this.state.searchingGiphy ? (\n          <div style={ { textAlign: 'center' } }>\n            <Spinner animation=\"grow\" />\n            <p children=\"Searching giphy...\" />\n          </div>\n        ) : this.state.loadingVideos ? (\n          <div style={ { textAlign: 'center' } }>\n            <Spinner animation=\"grow\" />\n            <p children=\"Loading giphy results...\" />\n          </div>\n        ) : null }\n\n      </div>\n    )\n  }\n\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}