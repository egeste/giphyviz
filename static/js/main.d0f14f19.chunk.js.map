{"version":3,"sources":["components/Cube.js","components/AudioAnalyser.js","components/AudioVisualiser.js","App.js","index.js"],"names":["PureComponent","AudioAnalyser","state","playing","onAudioFrame","_this","audioAnalyser","frequencyData","Uint8Array","frequencyBinCount","getByteFrequencyData","props","onFrequencyData","requestAnimationFrame","onAudioPlayerRef","audioPlayerRef","audioEl","crossOrigin","audioContext","AudioContext","audioSource","createMediaElementSource","createAnalyser","connect","destination","onUpdatePlaying","callback","isCurrentlyPlaying","shouldNowBePlaying","setState","apply","arguments","react_default","a","createElement","bundle_default","Object","assign","controls","this","ref","onAbort","onEnded","onPause","onPlay","AudioVisualiser","react","AudioAnalyser_AudioAnalyser","renderFrequencyData","toConsumableArray","DEFAULT_FILTER","api_key","frequencyZoomScalar","scaleLinear","domain","range","App","mp3","gifs","term","gifCount","loadingMusic","loadingVideos","searchingGiphy","differenceIndex","componentDidMount","onSearchGiphy","onChangeSearch","_ref","target","value","onChangeMP3","debounce","_ref2","filter","objectSpread","q","limit","fetch","concat","qs","stringify","then","response","json","_ref3","data","onPreloadVideos","catch","Promise","all","map","gif","resolve","reject","image","window","Image","src","images","original","url","onload","onerror","freqs","length","averageAmplitude","reduce","memo","freq","highestAmplitudeIndex","indexOf","sort","console","log","amplitudeGif","scaleQuantize","style","position","width","height","zIndex","objectFit","Navbar","bg","variant","expand","Brand","to","children","Toggle","Container","Row","Col","xs","Card","Body","Form","Group","Label","Control","type","placeholder","onChange","InputGroup","Append","Text","Spinner","animation","size","AudioVisualiser_AudioVisualiser","autoPlay","textAlign","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.d0f14f19.chunk.js","sourcesContent":["import omit from 'lodash/omit'\nimport * as THREE from 'three'\n\nimport React, { PureComponent } from 'react'\n\n\nexport default class Scene extends PureComponent {\n\n  state = {}\n\n  componentDidMount = () => {\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    this.camera = new THREE.PerspectiveCamera(75, (width / height), 0.1, 1000)\n    this.camera.position.z = 4\n\n    this.geometry = new THREE.BoxGeometry(1, 1, 1)\n    this.material = new THREE.MeshBasicMaterial({ color: 'purple' })\n    this.cube = new THREE.Mesh(this.geometry, this.material)\n\n    this.scene = new THREE.Scene()\n    this.scene.add(this.cube)\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })\n    this.renderer.setSize(width, height)\n\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n  }\n\n  componentWillUnmount = () => {\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate = () => {\n    this.cube.rotation.x += 0.01\n    this.cube.rotation.y += 0.01\n    this.cube.rotation.z += 0.01\n    this.camera.position.z = this.props.zoom\n\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  onRef = mount => this.mount = mount\n\n  render() {\n    return (\n      <div { ...omit(this.props, 'zoom') } ref={ this.onRef } />\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ReactAudioPlayer from 'react-audio-player'\n\nexport default class AudioAnalyser extends PureComponent {\n\n  static propTypes = {\n    ...ReactAudioPlayer.propTypes,\n    onFrequencyData: PropTypes.func.isRequired\n  }\n\n  // Track our playing state\n  state = { playing: false }\n\n  // Analyse a single \"frame\" of audio\n  onAudioFrame = () => {\n    // Don't do anything if we're paused, or if we don't have an analyser\n    if (!this.state.playing || !this.audioAnalyser) return\n\n    // Create a new Uint8Array to inject the frequency data into\n    const frequencyData = new Uint8Array(this.audioAnalyser.frequencyBinCount)\n\n    // Inject the frequency data into the array\n    this.audioAnalyser.getByteFrequencyData(frequencyData)\n\n    // Invoke our `onFrequencyData` prop\n    this.props.onFrequencyData(frequencyData)\n\n    // On the next animation frame, repeat the process\n    requestAnimationFrame(this.onAudioFrame)\n  }\n\n  // Handle the audio player ref once it's rendered\n  onAudioPlayerRef = audioPlayerRef => {\n    if (!audioPlayerRef || !audioPlayerRef.audioEl) return\n\n    // Allow the audio element to read data from dubious sources\n    audioPlayerRef.audioEl.crossOrigin=\"anonymous\"\n\n    // Interface with the Web Audio API\n    const audioContext = new AudioContext()\n    const audioSource = audioContext.createMediaElementSource(audioPlayerRef.audioEl)\n    this.audioAnalyser = audioContext.createAnalyser()\n\n    // Connect our audio source to the analyser\n    audioSource.connect(this.audioAnalyser)\n\n    // And also to the audio destination\n    audioSource.connect(audioContext.destination)\n  }\n\n  // Create a simple interface for tracking play state\n  onUpdatePlaying = (playing, callback) => (...args) => {\n    // Figure out what the current/new play state is\n    const isCurrentlyPlaying = this.state.playing\n    const shouldNowBePlaying = playing\n\n    // Cache the new play state\n    this.setState({ playing })\n\n    // Start tracking the audio frequencies if we started playing\n    if (!isCurrentlyPlaying && shouldNowBePlaying) {\n      this.onAudioFrame()\n    }\n\n    // Invoke the callback with whatever args we were passed\n    if (typeof callback === 'function') {\n      return callback(...args)\n    }\n  }\n\n  render() {\n    return (\n      <ReactAudioPlayer controls\n        { ...this.props }\n        ref={ this.onAudioPlayerRef }\n        onAbort={ this.onUpdatePlaying(false, this.props.onAbort) }\n        onEnded={ this.onUpdatePlaying(false, this.props.onEnded) }\n        onPause={ this.onUpdatePlaying(false, this.props.onPause) }\n        onPlay={ this.onUpdatePlaying(true, this.props.onPlay) }\n      />\n    )\n  }\n\n}\n","import React, { PureComponent, Fragment } from 'react'\nimport PropTypes from 'prop-types'\n\nimport AudioAnalyser from './AudioAnalyser'\n\nexport default class AudioVisualiser extends PureComponent {\n\n  static propTypes = {\n    renderFrequencyData: PropTypes.func.isRequired\n  }\n\n  state = { frequencyData: [] }\n\n  onFrequencyData = frequencyData => this.setState({ frequencyData })\n\n  render() {\n    return (\n      <Fragment>\n        <AudioAnalyser { ...this.props } onFrequencyData={ this.onFrequencyData } />\n        { this.props.renderFrequencyData([ ...this.state.frequencyData ]) }\n      </Fragment>\n    )\n  }\n\n}\n","import qs from 'qs'\nimport fetch from 'isomorphic-fetch'\nimport debounce from 'lodash/debounce'\n\nimport { scaleLinear, scaleQuantize } from 'd3-scale'\n\nimport React, { PureComponent, Fragment } from 'react'\n\nimport {\n  Card,\n  Form,\n  Navbar,\n  Spinner,\n  InputGroup,\n  Container, Row, Col\n} from 'react-bootstrap'\n\nimport Cube from './components/Cube'\nimport AudioVisualiser from './components/AudioVisualiser'\n\nimport './App.css'\n\nconst DEFAULT_FILTER = {\n  api_key: 'jjIUQzslADPjJkPXJdmHrkqvGER7KVwV'\n}\n\nconst frequencyZoomScalar = scaleLinear()\n  .domain([ 0, 255 ])\n  .range([ 5, 0 ])\n\nexport default class App extends PureComponent {\n\n  state = {\n    mp3: 'http://51.15.76.3:80/pulstranceHD.mp3',\n    gifs: [],\n    term: 'acid',\n    gifCount: 50,\n    loadingMusic: false,\n    loadingVideos: false,\n    searchingGiphy: false,\n    differenceIndex: []\n  }\n\n  componentDidMount = () => {\n    this.onSearchGiphy()\n  }\n\n  onChangeSearch = ({ target }) => {\n    this.setState({ term: target.value }, this.onSearchGiphy)\n  }\n\n  onChangeMP3 = debounce(({ target }) => {\n    this.setState({ mp3: target.value })\n  }, 1000)\n\n  onSearchGiphy = debounce(() => {\n    this.setState({ searchingGiphy: true })\n    const filter = { ...DEFAULT_FILTER, q: this.state.term, limit: this.state.gifCount }\n    return fetch(`https://api.giphy.com/v1/gifs/search?${qs.stringify(filter)}`)\n      .then(response => response.json())\n      .then(({ data }) => this.setState({ gifs: data, searchingGiphy: false }, this.onPreloadVideos))\n      .catch(() => this.setState({ searchingGiphy: false }))\n  }, 1000)\n\n  onPreloadVideos = () => {\n    this.setState({ loadingVideos: true })\n    return Promise.all(this.state.gifs.map(gif => {\n      return new Promise((resolve, reject) => {\n        const image = new window.Image()\n        image.src = `${gif.images.original.url}`\n        image.onload = () => resolve()\n        image.onerror = () => reject()\n      })\n    })).then(() => this.setState({ loadingVideos: false }))\n    .catch(() => this.setState({ loadingVideos: false }))\n  }\n\n  renderFrequencyData = freqs => {\n    if (this.state.searchingGiphy) return null\n    if (this.state.loadingVideos) return null\n    if (!this.state.gifs.length) return null\n\n    const averageAmplitude = freqs.reduce(((memo, freq) => memo + freq), 0) / freqs.length\n    const highestAmplitudeIndex = freqs.indexOf(([ ...freqs ].sort()[0]))\n\n    console.log(highestAmplitudeIndex)\n\n    const amplitudeGif = scaleQuantize().domain([ 0, freqs.length ]).range(this.state.gifs)(highestAmplitudeIndex)\n    const zoom = frequencyZoomScalar(averageAmplitude)\n    return (\n      <div style={ { position: 'relative' } }>\n        <img src={ `${amplitudeGif.images.original.url}` }\n          style={ { position: 'absolute', width: '100%', height: '60vh', zIndex: -1, objectFit: 'fill' } }\n        />\n        {/*\n        <Cube zoom={ zoom } style={ { width: '100%', height: '60vh' } } />\n        */}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <Fragment>\n\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\n          <Navbar.Brand to=\"/\" children=\"giphyviz\" />\n          <Navbar.Toggle />\n        </Navbar>\n\n        <Container>\n          <Row>\n            <Col xs={ 3 }>\n              <Card>\n                <Card.Body>\n                  <Form>\n\n                    <Form.Group>\n                      <Form.Label children=\"Audio Source\" />\n                      <Form.Control type=\"text\"\n                        value={ this.state.mp3 }\n                        placeholder=\"http://someurl.com/file.mp3\"\n                        onChange={ this.onChangeMP3 }\n                      />\n                    </Form.Group>\n\n                    <Form.Group>\n                      <Form.Label children=\"Giphy Search Term\" />\n                      <InputGroup>\n                        <Form.Control type=\"text\"\n                          value={ this.state.term }\n                          placeholder=\"Search\"\n                          onChange={ this.onChangeSearch }\n                        />\n                        { this.state.searchingGiphy ? (\n                          <InputGroup.Append>\n                            <InputGroup.Text>\n                              <Spinner animation=\"border\" size=\"sm\" />\n                            </InputGroup.Text>\n                          </InputGroup.Append>\n                        ) : null }\n                      </InputGroup>\n                    </Form.Group>\n\n                  </Form>\n                </Card.Body>\n              </Card>\n            </Col>\n\n            <Col xs={ 9 }>\n              <AudioVisualiser autoPlay\n                src={ this.state.mp3 }\n                style={ { width: '100%' } }\n                renderFrequencyData={ this.renderFrequencyData }\n              />\n\n              { this.state.searchingGiphy ? (\n                <div style={ { textAlign: 'center' } }>\n                  <Spinner animation=\"grow\" />\n                  <p children=\"Searching giphy...\" />\n                </div>\n              ) : this.state.loadingVideos ? (\n                <div style={ { textAlign: 'center' } }>\n                  <Spinner animation=\"grow\" />\n                  <p children={ `Loading ${this.state.gifCount} giphy results...` } />\n                </div>\n              ) : null }\n            </Col>\n          </Row>\n        </Container>\n\n      </Fragment>\n    )\n  }\n\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}